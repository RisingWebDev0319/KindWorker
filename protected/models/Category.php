<?php

/**
 * Company: ToXSL Technologies Pvt. Ltd. < www.toxsl.com >
 * Author : Shiv Charan Panjeta < shiv@toxsl.com >
 */

/**
 * This is the model class for table "tbl_category".
 *
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property string $image_file
 * @property integer $state_id
 * @property integer $type_id
 * @property string $created_on
 * @property string $updated_on
 * @property integer $created_by_id === Related data ===
 * @property User $createdBy
 * @property Job[] $jobs
 * @property SubCategory[] $subCategories
 * @property UserService[] $userServices
 */
namespace app\models;

use Yii;
use yii\components;
use app\models\User;
use app\models\Job;
use app\models\SubCategory;
use app\models\UserService;

class Category extends \app\components\TActiveRecord {
	public function __toString() {
		return ( string ) $this->title;
	}
	const STATE_INACTIVE = 0;
	const STATE_ACTIVE = 1;
	const STATE_DELETED = 2;
	const LOCAL_SERVICE=0;
	const ONLINE_SERIVICE=1;
	
	public static function getStateOptions() {
		return [ 
				self::STATE_INACTIVE => "New",
				self::STATE_ACTIVE => "Active",
				self::STATE_DELETED => "Archived" 
		];
	}
	public function getState() {
		$list = self::getStateOptions ();
		return isset ( $list [$this->state_id] ) ? $list [$this->state_id] : 'Not Defined';
	}
	public function getStateBadge() {
		$list = [ 
				self::STATE_INACTIVE => "primary",
				self::STATE_ACTIVE => "success",
				self::STATE_DELETED => "danger" 
		];
		return isset ( $list [$this->state_id] ) ? \yii\helpers\Html::tag ( 'span', $this->getState (), [ 
				'class' => 'label label-' . $list [$this->state_id] 
		] ) : 'Not Defined';
	}
	public static function getTypeOptions() {
		return [ 
				self::LOCAL_SERVICE => "Local Service",
				self::ONLINE_SERIVICE => "Remote Service",
				
				
			 
		];
	}
	public function getType() {
		$list = self::getTypeOptions ();
		return isset ( $list [$this->type_id] ) ? $list [$this->type_id] : 'Not Defined';
	}
	public function beforeValidate() {
		if ($this->isNewRecord) {
			if (! isset ( $this->created_on ))
				$this->created_on = date ( 'Y-m-d H:i:s' );
			if (! isset ( $this->updated_on ))
				$this->updated_on = date ( 'Y-m-d H:i:s' );
			if (! isset ( $this->created_by_id ))
				$this->created_by_id = Yii::$app->user->id;
		} else {
			$this->updated_on = date ( 'Y-m-d H:i:s' );
		}
		return parent::beforeValidate ();
	}
	
	/**
	 * @inheritdoc
	 */
	public static function tableName() {
		return '{{%category}}';
	}
	
	/**
	 * @inheritdoc
	 */
	public function rules() {
		return [ 
				[ 
						[ 
								'title',
								'image_file',
								'created_on',

						],
						'required' 
				],
			
				[ 
						[ 
								'description',
								 
						],
						'string' 
				],
				[ 
						[       
								'state_id',
								'type_id',
								 
						],
						'integer' 
				],
				[ 
						[ 
								'created_on',
								'updated_on',
								'count'
						],
						'safe' 
				],
				[ 
						[ 
								'title',
						],
						'string',
						'max' => 255 
				],
				[ 
						[ 
								'created_by_id' 
						],
						'exist',
						'skipOnError' => true,
						'targetClass' => User::className (),
						'targetAttribute' => [ 
								'created_by_id' => 'id' 
						] 
				],
				[ 
						[ 
								'title',
						],
						'trim' 
				],
				[
						[
								'image_file'
						],
						'image',
						'skipOnEmpty' => true,
						'extensions' => 'png, jpg,jpeg'
				],
				[ 
						[ 
								'state_id' 
						],
						'in',
						'range' => array_keys ( self::getStateOptions () ) 
				],
				[ 
						[ 
								'type_id' 
						],
						'in',
						'range' => array_keys ( self::getTypeOptions () ) 
				] 
		];
	}
	
	/**
	 * @inheritdoc
	 */
	public function attributeLabels() {
		return [ 
				'id' => Yii::t ( 'app', 'ID' ),
				'title' => Yii::t ( 'app', 'Title' ),
				'description' => Yii::t ( 'app', 'Description' ),
				'image_file' => Yii::t ( 'app', 'Image File' ),
				'state_id' => Yii::t ( 'app', 'State' ),
				'type_id' => Yii::t ( 'app', 'Type' ),
				'created_on' => Yii::t ( 'app', 'Created On' ),
				'updated_on' => Yii::t ( 'app', 'Updated On' ),
				'created_by_id' => Yii::t ( 'app', 'Created By' ) 
		];
	}
	
	/**
	 *"Category[title]" => "Test string",
					"Category[description]" => "This is autogenerated test description.",
					"Category[image_file]" => "Test string",
					"Category[state_id]" => "0",
					"Category[type_id]" => "0",
					"Category[created_on]" => "2017-05-31 17:47:28",
					"Category[updated_on]" => "2017-05-31 17:47:28",
					"Category[created_by_id]" => "1",
	 * @return \yii\db\ActiveQuery
	 */
	public function getCreatedBy() {
		return $this->hasOne ( User::className (), [ 
				'id' => 'created_by_id' 
		] );
	}
	
	/**
	 *
	 * @return \yii\db\ActiveQuery
	 */
	
	
	/**
	 *
	 * @return \yii\db\ActiveQuery
	 */
	public function getSubCategories() {
		return $this->hasMany ( SubCategory::className (), [ 
				'category_id' => 'id' 
		] );
	}
	
	/**
	 *
	 * @return \yii\db\ActiveQuery
	 */
	public function getUserServices() {
		return $this->hasMany ( UserService::className (), [ 
				'category_id' => 'id' 
		] );
	}
	public static function getHasManyRelations() {
		$relations = [ ];
		$relations ['Jobs'] = [ 
				'jobs',
				'Job',
				'id',
				'category_id' 
		];
		$relations ['SubCategories'] = [ 
				'subCategories',
				'SubCategory',
				'id',
				'category_id' 
		];
		$relations ['UserServices'] = [ 
				'userServices',
				'UserService',
				'id',
				'category_id' 
		];
		return $relations;
	}
	public static function getHasOneRelations() {
		$relations = [ ];
		$relations ['created_by_id'] = [ 
				'createdBy',
				'User',
				'id' 
		];
		return $relations;
	}
	public function beforeDelete() {
		// Job::deleteRelatedAll(['id'=>$this->Jobs]);
		// SubCategory::deleteRelatedAll(['id'=>$this->SubCategories]);
		// UserService::deleteRelatedAll(['id'=>$this->UserServices]);
//		SubCategory::deleteRelatedAll ( [
//				'category_id' => $this->id
//		] );
        Job::deleteRelatedAll ( [
            'category_id' => $this->id,
            //'customjob_skills' => $this->id
        ] );
        UserProfile::deleteRelatedAll ( [
            'category_id' => $this->id
        ] );
		WorkerSkill::deleteRelatedAll ( [
				'category_id' => $this->id
		] );
		return parent::beforeDelete ();
	}
	
	
	public function getSubCategory() {
		$data=[];
		$model = SubCategory::find ()->where ( [
				'category_id' => $this->id
		] )->all ();
		if(!empty($model))
		{
			foreach ($model as $models)
			{
				$data[]=$models->asJson();
			}
			return $data;
			
		}
		
		
	}

    public function getSubCategoryTitle() {
        $data=[];
        $model = SubCategory::find ()->where ( [
            'category_id' => $this->id
        ] )->all ();
        if(!empty($model))
        {
            foreach ($model as $models)
            {
                $data[]=$models->getTitle();
            }
            $str_separated = implode(",", $data);
            return $str_separated;

        }


    }

	public function asJson($with_relations = false) {
		$json = [ ];
		$json ['id'] = $this->id;
		$json ['title'] = $this->title;
		$json ['description'] = self::getSubCategoryTitle();
	
		 if (! empty ( $this->image_file)) {
		 	$json ['image_file'] = \Yii::$app->urlManager->createAbsoluteUrl ( [
		 			'user/download/',
		 			'profile_file' => $this->image_file
		 	] );
		 } else {
		 	$json ['image_file'] = \Yii::$app->urlManager->createAbsoluteUrl ( [
		 			'themes/green/img/user.jpeg'
		 	] );
		 }
	
		$json['state_name'] = $this->getState($this->state_id);
		$json ['state_id'] = $this->state_id;
		$json['type_name'] = $this->getType($this->type_id);
		$json ['type_id'] = $this->type_id;
		$json ['created_on'] = $this->created_on;
		$json ['created_by_id'] = $this->created_by_id;
		if ($with_relations) {
			
			if (! empty ( $this->getSubCategory() )) {
				$json ['sub_category'] = $this->getSubCategory();
			}
			
			
			// CreatedBy $list = $this->getCreatedBy()->all();
			
			/* if (is_array ( $list )) {
				$relationData = [ ];
				foreach ( $list as $item ) {
					$relationData [] = $item->asJson ();
				}
				$json ['CreatedBy'] = $relationData;
			} else {
				$json ['CreatedBy'] = $list;
			}
			// Jobs $list = $this->getJobs()->all();
			
			if (is_array ( $list )) {
				$relationData = [ ];
				foreach ( $list as $item ) {
					$relationData [] = $item->asJson ();
				}
				$json ['Jobs'] = $relationData;
			} else {
				$json ['Jobs'] = $list;
			}
			// SubCategories $list = $this->getSubCategories()->all();
			
			if (is_array ( $list )) {
				$relationData = [ ];
				foreach ( $list as $item ) {
					$relationData [] = $item->asJson ();
				}
				$json ['SubCategories'] = $relationData;
			} else {
				$json ['SubCategories'] = $list;
			}
			// UserServices $list = $this->getUserServices()->all();
			
			if (is_array ( $list )) {
				$relationData = [ ];
				foreach ( $list as $item ) {
					$relationData [] = $item->asJson ();
				}
				$json ['UserServices'] = $relationData;
			} else {
				$json ['UserServices'] = $list;
			} */
		}
		return $json;
	}
	
}
